---
title: "Fuel consuption prediction"
format: docx
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

# Fuel consumption - prediction using linear Regression

## Business context

-   **Problem Statement:** *Crie um modelo de regressão linear para prever o consumo de combustível*

## Data Prep

#### Libraries

```{r}
library(tidyverse)
library(car)
library(ucimlrepo)
library(magrittr)
library(fastDummies)
library(olsrr)

```

#### Dataset

```{r import}
auto_mpg_info <- ucimlrepo::fetch_ucirepo(id=9)
data <- auto_mpg_info$data

auto_mpg <- data.frame(data$original)

```

#### Variable Dictionary - Auto MPG

| **Variable**   | **Type**    | **Description**                                         | **Units**        | **Missing Values** |
|---------------|---------------|---------------|---------------|---------------|
| `mpg`          | Continuous  | Fuel consumption in miles per gallon (target variable). | Miles per gallon | No                 |
| `cylinders`    | Discrete    | Number of engine cylinders.                             | Integer          | No                 |
| `displacement` | Continuous  | Engine displacement.                                    | Cubic inches     | No                 |
| `horsepower`   | Continuous  | Engine horsepower.                                      | Horsepower (hp)  | Yes (6 values)     |
| `weight`       | Continuous  | Vehicle weight.                                         | Pounds           | No                 |
| `acceleration` | Continuous  | Time to accelerate (0 to 60 mph).                       | Seconds          | No                 |
| `model_year`   | Discrete    | Model year of the vehicle.                              | Year             | No                 |
| `origin`       | Discrete    | Origin of the vehicle (1 = USA, 2 = Europe, 3 = Japan). | Integer          | No                 |
| `car_name`     | Categorical | Name of the car.                                        | Text             | No                 |

#### Exploratory data analysis (EDA)

Para começar a conhecer melhor o dataset vou exibir uma pequena amostra usando as 6 primeiras linhas

```{r}
head(auto_mpg)
```

O summary abaixo fornece um resumo das variaveis do dataset e as principais medidas descritivas associadas. É possivel constatar que:

-   a variavael horsepower possui 6 registros NA

-   as variaveis car_name e origin podem ser tomadas como categoricas - a variavel model_year é uma variavel discreta

```{r summary}
summary(auto_mpg)
```

Através do boxplot é possivel identificar a presença de outliers nas variaveis independentes horsepower e acceleration além da variavel dependente mpg.

```{r boxplot_eda}

continuous_variables <- c('displacement', 'horsepower', 'weight',
                       'acceleration', 'mpg')

plots <- list()

for (i in continuous_variables){
  
  p <- auto_mpg %>% 
    ggplot(aes_string(x = i))+
    geom_boxplot() +
    ggtitle(paste('Distribution of', i))
  
 plots[[i]] <- p
 
}

gridExtra::grid.arrange(grobs = plots, nrow = 2, ncol = 3)

```

Os histogramas abaixo sao uteis na identificaçao do comportamento da distrubuiçao das variáveis. Os gráficos abaixo sugerem que apenas a variável acceleration apresenta distribuiçao de comportamento normal, as demais são assimétricas

```{r histogram_eda}
hists <- list()

for (i in continuous_variables){
  
  p <- auto_mpg %>% 
    ggplot(aes_string(x = i))+
    # geom_histogram()+
    geom_density()+
    ggtitle(paste('Histogram of', i))
  
  hists[[i]] <- p
  
}

gridExtra::grid.arrange(grobs = hists, nrow = 2, ncol = 3)

```

Análise das variaveis categoricas e discretas

```{r bar_chart}
cat_variables <- c('car_name', 'model_year', 'origin', 'cylinders')

bar_plt <- list()

for ( i in cat_variables){
  
  b <- auto_mpg %>% 
    ggplot(aes_string(x = i)) +
    geom_bar()
  
  bar_plt[[i]] <- b
}

gridExtra::grid.arrange(grobs = bar_plt, nrow = 4)

```

Na matriz de correlaçao abaixo é possível observar que as variaveis weight e displacement apresenda colinearidade o que nos da um indicativo de que uma vez presente no modelo podem ser causadoras de multicolinearidade.

```{r correlation}

auto_mpg_numeric <- auto_mpg %>% 
 dplyr::select(-car_name)

cor_matrix <- cor(auto_mpg_numeric)

corrplot::corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45, 
         tl.cex = 0.8, addCoef.col = "black", number.cex = 0.7, mar = c(0,0,2,0)) 

```

Examinando relaçao de linearidade com a variavel dependente

```{r scater_plot }

indep_num_var <- c('displacement', 'horsepower', 'weight',
                       'acceleration')

lin_plot <- list()

for (i in indep_num_var){
  
  l <- auto_mpg %>% 
    ggplot(aes_string(x = i, y = "mpg"))+
    geom_point()
  
  lin_plot[[i]] <- l
  
}

gridExtra::grid.arrange(grobs = lin_plot, nrow = 3, ncol = 3)

```

### Transforming and clean-ups

#### Missing

Nesse caso decidi retirar os missing cases da base. Como o numero de missing representa apenas 1,5% dos data point entendo que nao haverá grande impacto na construcao de um modelo eficiente

```{r horsepower_filter }

auto_mpg <- auto_mpg %>% 
  dplyr::filter(!is.na(horsepower))

```

#### Outliers

Como é possível perceber através dos graficos box_plot, as variaveis independentes horsepower e acceleration.

```{r}
auto_mpg <- auto_mpg %>% 
  dplyr::mutate(horsepower = log10(horsepower+1),
                acceleration = log10(acceleration+1))
```

#### Categorical variables

Em relacao as variaveis categoricas foi possivel notar atraves do grafico de barras que o excessivo numero de categorias na variavel cars_name nao contribui para um modelo de grande eficiencia sem aumetar de maneira expressiva a sua complexidade. Dessa forma farei a remoçao dessa variavel do dataset.

```{r car_name_select }
auto_mpg <- auto_mpg %>% 
  dplyr::select(-car_name)
```

Ja quanto a variavel origin a abordagem vai se baser na quantidade de cada categoria A tabela abaixo nos mostra que 62% nos carros sao da origem de codigo americanos (cod = 1), portanto farei um agrupamento dos demais em um único grupo

```{r origin_tbl}

auto_mpg %>% 
  dplyr::group_by(origin) %>% 
  dplyr::summarise(total = dplyr::n()) %>% 
  dplyr::mutate(freq = total/sum(total))

```

```{r}
auto_mpg <- auto_mpg %>% 
  dplyr::mutate(origin = 
                  dplyr::if_else(origin == 1, 'US',
                                 'Non_US'))
```

Em seguida utilizarei de variaveis dummy para representar a variavel origin. Dessa forma conseguirei utilizar do poder de explicacao dessa variavel no modelo

```{r origin_dummy}

auto_mpg <- fastDummies::dummy_columns(auto_mpg,
                          select_columns = 'origin',
                          remove_first_dummy = TRUE,
                          remove_selected_columns = TRUE)

```

Utilizarei a mesma abordagem para a variavel cylinders. A tabela abaixo mostra que mais de 50% dos carros sao modelos de 4 cilindros, modelos de 6 e 8 cilindoros possuem frequencia semelhante, 21% e 25% respectivamente. Modelos de 3 e 5 cilindros representam em torno de apenas 1%. Usando ainda o contexto de negocio, farei o agrupamento em apenas duas categorias: até 4 cilindros (up_to_four ) e a partir de 5 cilindros (five_more)

```{r}
auto_mpg %>% 
  dplyr::group_by(cylinders) %>% 
  dplyr::summarise(total = dplyr::n()) %>% 
  dplyr::mutate(freq = total/sum(total))
```

```{r}

auto_mpg <- auto_mpg %>% 
  dplyr::mutate(cylinders = 
                  dplyr::if_else(cylinders > 4, 'five_more',
                                 'up_to_four'))

```

Em seguida utilizarei de variaveis dummy para representar a variavel cylinders. Dessa forma conseguirei utilizar do poder de explicacao dessa variavel no modelo.

```{r cylnders_dummy}

auto_mpg <- fastDummies::dummy_columns(auto_mpg,
                                       select_columns = 'cylinders',
                                       remove_first_dummy = TRUE,
                                       remove_selected_columns = TRUE)

```

#### Muticolinearity

Após a transformação das variaveis categoricas é interessante voltar à analise de multicolinearidade.

```{r multicolinearity}

cor_matrix <- cor(auto_mpg)

corrplot::corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45, 
         tl.cex = 0.8, addCoef.col = "black", number.cex = 0.7, mar = c(0,0,2,0)) 

```

De acordo com a matriz acima as variaveis horsepower, weight, displacement e cylinders_up_to_four apresentam niveis de colinearidade excessivos entre si, por isso ferei a remoçao de algumas delas, tomando os seguintes critérios: - displacement possui os maiores niveis de colinearidade com as outras variaveis, por isso será removida - weight apresenta colinearidade com horsepower e discplacemente por isso tambem será removida, levando em consideracao que ao remove-la nao restará nenhuma relacao de colineridade entre as ariaveis independentes

```{r}

auto_mpg <- auto_mpg %>% 
  dplyr::select(-displacement,
                -weight)

cor_matrix <- cor(auto_mpg)

corrplot::corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45, 
         tl.cex = 0.8, addCoef.col = "black", number.cex = 0.7, mar = c(0,0,2,0)) 

```

## Model

A primeira tentativa de criacao do modelo utiliza uma abordagem simples e direta. Os resultados se mostraram bons, de certa forma: - Testes F e t satisfatorios (exceto para horsepower e acceleration) - R2 e adjusted R2 por volta de 0.8

```{r first_model, echo = TRUE}

first_model <- lm(mpg ~ ., data = auto_mpg)
summary(first_model)

```

Checando se o metodo stepwise de selecao de variaveis será capaz de fornecer um modelo melhor. O metodo de elecao de variaveis apresentpou um modelo com metricas de eficiencia semelhantes ao primeiro modelo, utilizando menos variavies, ou seja, de menor complexidade mas mais assertivo.

```{r step_model}

step_model <- step(first_model, direction = 'both')
summary(step_model)
```

A comparacao da eficiencia dos modelos tambem pode ser feita atraves do calulo da metrica AIC e os resultos sugerem ligeira superioridade do primeiro modelo. Como a diferença é bem pequena continuarei a utilizar o modelo stepwise como principal

```{r}
AIC(first_model)

AIC(step_model)

```

### Redisuals

#### Normalidade de residuos

Os gráficos abaixo apontam para uma distribuiçao normal dos residuos, o que satisfaz uma das condiçoes conceituais do modelo

```{r residuals_normality}

hist(step_model$residuals)
qqnorm(step_model$residuals)
qqline(step_model$residuals)

```

Abaixo apliquei o Shapiro test para confirmar a normalidade residual e ela nao foi atestada

```{r shapiro_test}

shapiro.test(step_model$residuals)

```

#### Homocedasticidade

O gráfico de residuos abaixo aponta a media zero para a variancia, o que é bom, mas ainda tenho duvidas em relacao a existencia de padrão na variancia dos residuos

```{r}

olsrr::ols_plot_resid_fit(step_model)
```

Aplicando o testde e Breusch-Pagan é possivel afirmar que a variancia nao é constante, portante o modelo não foi atestado

```{r breusch_pagan}

olsrr::ols_test_breusch_pagan(step_model)

```

#### Multicolinearity

Para atestar a existencia de multicolinearidade no modelo utilizarei a analise VIF

```{r vif}

olsrr::ols_vif_tol(step_model)

```

#### Box Cox

As the residual analysis shows that its variance is not constant and its not normal distributed I'll use Box-Cox transformation to make another try.

```{r box_cox}
lambda <- car::powerTransform(auto_mpg$mpg)

auto_mpg$mpg_adj <- forecast::BoxCox(auto_mpg$mpg, lambda = lambda$lambda)

```

Verificando o modelo com após a transformacao do y

```{r new_model}

auto_mpg_adj <- auto_mpg %>% dplyr::select(-mpg)

new_model <- lm(mpg_adj ~ ., auto_mpg_adj)

step_new_model <- step(new_model, direction = 'both')
summary(step_new_model)

```

##### Residuals normality distribution

```{r}
hist(step_new_model$residuals)

qqnorm(step_new_model$residuals)
qqline(step_new_model$residuals)
```

```{r}
shapiro.test(step_new_model$residuals)
```

##### Multicolineartity

```{r}
olsrr::ols_vif_tol(step_new_model)
```

##### Homocedasticity test

```{r}

olsrr::ols_plot_resid_fit(step_new_model)

```

```{r}
olsrr::ols_test_breusch_pagan(step_new_model)
```
